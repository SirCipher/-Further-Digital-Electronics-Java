package client;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.GridLayout;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.MalformedURLException;
import java.net.Socket;
import java.net.URL;
import java.net.UnknownHostException;
import java.util.List;

import javax.imageio.ImageIO;
import javax.swing.BorderFactory;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JScrollPane;
import javax.swing.ToolTipManager;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;

import com.sun.jna.Native;
import com.sun.jna.NativeLibrary;

import server.DataPackages;
import server.MEMEServer;
import server.VideoFile;
import uk.co.caprica.vlcj.binding.LibVlc;
import uk.co.caprica.vlcj.component.EmbeddedMediaPlayerComponent;
import uk.co.caprica.vlcj.player.embedded.EmbeddedMediaPlayer;
import uk.co.caprica.vlcj.runtime.RuntimeUtil;

public class MEMEClient extends JFrame {

	/**
	 * Autogenerated serial number
	 */
	private static final long				serialVersionUID	= 1L;

	public List<VideoFile>					videoList;
	public Socket							serverSocket;
	private String							host				= "127.0.0.1";
	private int								port				= 1192;
	public ObjectInputStream				inputFromServer;
	private JPanel							videoPanel, videoListPanel;
	private JScrollPane						infoPanel;
	public JButton							button, button2, button3;
	public int								selectedIndex		= 0;
	public String							currentFilmPlaying	= "";
	public ObjectOutputStream				outputToServer;
	boolean									fullscreen			= false;
	private int								videoListMax;
	private int								currentIndex		= 0;
	private long							videoLength;
	private float							controlsPosition;
	private long							currentTime;
	private boolean							close				= false;
	public Thread							listen;

	private JMenuBar						menuBar;
	private JMenu							menu;
	private JCheckBoxMenuItem				infoPaneVisibility, videoControlsVisibility;
	EmbeddedMediaPlayer						mediaPlayer;
	private CustomControls					controlsPanel;
	private String							media				= null;
	EmbeddedMediaPlayerComponent			mediaPlayerComponent;
	private JButton[]						playButtons;

	/* Main method runs the server, then runs the client */
	public static void main(String[] args) {
		/*
		 * comment out the line below test multiple clients on a host. Run the
		 * server first, then run a client afterwards.
		 */
		MEMEServer.main(null);
		new MEMEClient();
	}

	// Used for the tests
	public JButton getButton1() {
		return playButtons[1];
	}

	/*
	 * Constructor for setting up the client, and running the main thread.
	 */
	public MEMEClient() {
		System.out.println("Client: Starting client\n");
		try {
			System.out.println("Client: Opening client socket");
			openSocket();
			System.out.println("Client: Getting list from server");
			getDataFromSocket();
		} catch (UnknownHostException e) {
			System.out.println("Client: Don't know about host : " + host);
			System.exit(-1);
		} catch (IOException e) {
			System.out.println("Client: Couldn't open the I/O connection : " + host + ":" + port);
			System.exit(-1);
		} catch (ClassNotFoundException e) {
			System.out.println("Class definition not found for incoming object.");
			e.printStackTrace();
			System.exit(-1);
		}

		System.out.println("Client: Client Started, GUI next");
		/* pre-streaming setup methods */
		setupLibraries();
		
		// Sets up the main JPanel and some child components
		setupEnvironment();
		setupPlayer();
		createPanels(videoList);
		createMenu();
		validate();

		// Play once we have the media 
		mediaPlayer.playMedia(media);

		/*
		 * thread continuously listens for new input from the server- used when
		 * the video changes
		 */
		listen = new Thread("Client listen") {
			public void run() {
				System.out.println("Client: Starting LISTEN THREAD ");
				// While the client doesn't want to close
				while (!close) {
					try {
						getData();
					} catch (ClassNotFoundException e) {
						// Exception caused when we close the sockets
						// Break this loop and stop the thread
						break;
					} catch (IOException e) {
						break;
					}
				}
				System.out.println("Client: Exiting listen thread");
			}
		};
		listen.start();
	}

	/*
	 * Checks for messages from the server, receives new time information for
	 * videos
	 */
	private void getData() throws IOException, ClassNotFoundException {
		DataPackages receivedData = null;

		receivedData = (DataPackages) inputFromServer.readObject();

		if (receivedData.getType().equals("Length")) {
			System.out.println("\nClient received length of :" + (long) receivedData.getObject());
			videoLength = (long) receivedData.getObject();
		}

		if (receivedData.getType().equals("TimeStamp")) {
			currentTime = (long) receivedData.getObject();
		}

	}

	/* Creates and fills the menu bar, parameterizable */
	private void createMenu() {
		// These two lines stop the menu from appearing behind other elements
		JPopupMenu.setDefaultLightWeightPopupEnabled(false);
		ToolTipManager.sharedInstance().setLightWeightPopupEnabled(false);

		// Build the first menu.
		menuBar = new JMenuBar();
		menu = new JMenu("Options");
		menuBar.add(menu);

		// makes the menubar and menu unfocusable for listeners
		menuBar.setFocusable(false);
		menu.setFocusable(false);

		// Set the current menu to the one created
		this.setJMenuBar(menuBar);

		// Create checkbox to toggle video controls
		infoPaneVisibility = new JCheckBoxMenuItem("Display film list");
		infoPaneVisibility.setSelected(true);

		menu.add(infoPaneVisibility);
		menu.addSeparator();

		// Create checkbox to toggle video controls
		videoControlsVisibility = new JCheckBoxMenuItem("Display controls");
		videoControlsVisibility.setSelected(true);

		menu.add(videoControlsVisibility);

		/*
		 * Adds an action listener to detect when the infoPanel visibility
		 * should be toggled.
		 */
		infoPaneVisibility.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				infoPanel.setVisible(infoPaneVisibility.isSelected());
				validate();
			}
		});

		/*
		 * Adds an action listener to detect when the infoPanel visibility
		 * should be toggled.
		 */
		videoControlsVisibility.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				controlsPanel.setVisible(videoControlsVisibility.isSelected());
				validate();
			}
		});

	}

	/*
	 * Creates and populates the panels. Argument is the videoList, used to
	 * populate the video list panel
	 */
	private void createPanels(List<VideoFile> videoList) {
		/* Create the info pane to hold the videolist */
		infoPanel = new JScrollPane();

		/* Create a pane to hold the list of videos */
		videoListPanel = new JPanel();
		GridLayout gridLayout = new GridLayout(videoList.size(), 0);
		videoListPanel.setLayout(gridLayout);

		/* Add the videoListPanel to the infoPanel side-panel */
		infoPanel.getViewport().add(videoListPanel);

		this.add(infoPanel, BorderLayout.EAST);

		videoListPanel.setVisible(true);

		/*
		 * Dynamically generates the content for the videoListPanel, based on
		 * the size of the videoList.
		 */
		JPanel[] panels = new JPanel[videoList.size()];
		JLabel[] labels = new JLabel[videoList.size()];
		JLabel[] imageHolder = new JLabel[videoList.size()];
		playButtons = new JButton[videoList.size()];
		Image[] images = new Image[videoList.size()];

		// Loop for all videos in the videoList array
		for (int i = 0; i < videoList.size(); i++) {
			// Populate the panels array
			panels[i] = new JPanel();
			panels[i].setLayout(new BorderLayout());
			// Populate the labels array
			labels[i] = new JLabel();
			// Create a black line/border around each panel to separate each
			// entity
			panels[i].setBorder(BorderFactory.createLineBorder(Color.black, 1));

			// Populate the button array
			playButtons[i] = new JButton();
			playButtons[i].setFocusable(false);
			// Set the loop index as the action listener command so we keep the
			// XML index
			playButtons[i].setActionCommand((String) Integer.toString(i));

			// Add an action listener to each button
			playButtons[i].addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent a) {
					int temp = Integer.parseInt(a.getActionCommand());
					System.out.println("Client: Button id: " + a.getActionCommand());
					changeFilm(temp);
				}
			});

			// Set the title of the button to the film title
			playButtons[i].setText("Play " + videoList.get(i).getTitle());
			panels[i].add(playButtons[i], BorderLayout.NORTH);

			// Retrieve the poster image
			// connection
			URL url = null;
			// handle Exception
			try {
				url = new URL((String) videoList.get(i).getPoster());
			} catch (MalformedURLException e) {
				System.out.println("Client: Invalid URL.");
				System.out.println(e.getMessage());
			}
			try {
				images[i] = ImageIO.read(url);
			} catch (IOException e) {
				e.printStackTrace();
			}

			Image scaled = images[i].getScaledInstance(150, 178, Image.SCALE_SMOOTH);
			// Create a placeholder for the image to be displayed
			imageHolder[i] = new JLabel(new ImageIcon(scaled));
			panels[i].add(imageHolder[i], BorderLayout.EAST);

			// Populate the side panel with each film and its components
			videoListPanel.add(panels[i]);

		}

		/* makes the infopanel and video list/buttons unfocusable for listeners */
		infoPanel.setFocusable(false);
		videoListPanel.setFocusable(false);
		validate();

	}

	// Change the film based on the users choice from the list
	private void changeFilm(int index) {
		currentFilmPlaying = (String) videoList.get(index).getTitle();

		mediaPlayer.stop();
		try {
			sendCommand("STOP");
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		try {
			sendIndexToSocket(index);
			System.out.println("Client: Sending new request");
		} catch (IOException e1) {
			System.out.println("Client: IOException");
			e1.printStackTrace();
		}

		mediaPlayer.play();
		try {
			sendCommand("Play");
		} catch (IOException e1) {
			e1.printStackTrace();
		}

		setTitle("JavaFlix 2.0. Now Playing: " + currentFilmPlaying);
	}

	/*
	 * Sets up the main window, customizes the theme to Nimbus, and adds sub
	 * panels
	 */
	private void setupEnvironment() {
		setTitle("JavaFlix 2.0");
		this.setMinimumSize(new Dimension(1100, 700));
		this.pack();

		// Change the layout to Nimbus
		for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
			if ("Nimbus".equals(info.getName())) {
				try {
					UIManager.setLookAndFeel(info.getClassName());
				} catch (ClassNotFoundException e1) {
					e1.printStackTrace();
				} catch (InstantiationException e1) {
					e1.printStackTrace();
				} catch (IllegalAccessException e1) {
					e1.printStackTrace();
				} catch (UnsupportedLookAndFeelException e1) {
					e1.printStackTrace();
				}
				break;
			}
		}

		/*
		 * This window listener triggers the closing of the client, which in
		 * turn sends a message to server to trigger it closing down. In real
		 * application this would not send the message to the server.
		 */
		this.addWindowListener(new WindowAdapter() {
			@Override
			public void windowClosing(WindowEvent e) {
				close = true;

				// if (notStartedStreaming){
				// System.out.println("Shutting down pre-streaming");
				shutdownClient();
				// Dispose of the GUI
				dispose();
				// }

			}
		});

		/* 'escape' to exit fullscreen, and 'spacebar' to play/pause */
		this.addKeyListener(new KeyListener() {

			public void keyPressed(KeyEvent e) {

				if (e.getKeyCode() == 27) {
					if (fullscreen) {
						System.out.println("Exiting fullscreen.");
						toggleFullScreen();
					}
					else {
						System.out.println("Escape pressed, but already non-fullscreen");
					}
				}
				else if (e.getKeyCode() == 32) {
					System.out.println("Space pressed. Video playing/pausing");
					if (mediaPlayer.isPlaying()) {
						mediaPlayer.pause();
					}
					else {
						mediaPlayer.play();
					}
				}
				else {
					System.out.println("Key Pressed. Keycode: " + e.getKeyCode());
				}
			}

			@Override
			public void keyReleased(KeyEvent e) {
			}

			@Override
			public void keyTyped(KeyEvent e) {
			}

		});

		this.requestFocus();
		setVisible(true);
		/* Create the pane to play the video */
		videoPanel = new JPanel();
		videoPanel.setLayout(new BorderLayout());
		this.add(videoPanel, BorderLayout.CENTER);
	}

	/*
	 * Method to send a simple command to the server Sends as an empty
	 * datapackage
	 */
	public void sendCommand(String command) throws IOException {
		DataPackages selectedCommand = new DataPackages(command, 0);
		outputToServer.writeObject(selectedCommand);
		System.out.println("Client: Sending : " + command);
	}

	/* Sends user film selection to the server as an integer index */
	public void sendIndexToSocket(int selection) throws IOException {

		DataPackages selectedIndex = new DataPackages("Index", selection);
		outputToServer.writeObject(selectedIndex);
		System.out.println("Client: Sending : " + selection);

		// Only set it if it is greater than 0. Don't want negative commands on
		// the index
		if (selection >= 0) {
			currentIndex = selection;
		}
	}

	/*
	 * Sends the time position of the slider to the server. Allows user to use
	 * slider as a control
	 */
	public void sendPosition(DataPackages position) throws IOException {
		outputToServer.writeObject(position);
		System.out.println("Client: Sending new position of: " + position.getObject());
	}

	/*
	 * Receives videoList from server. Used to populate local videoList which is
	 * used to make the selectable list on the GUI
	 */
	@SuppressWarnings("unchecked")
	private void getDataFromSocket() throws IOException, ClassNotFoundException {

		DataPackages serverList = (DataPackages) inputFromServer.readObject();

		if (serverList.getType().equals("List")) {
			videoList = (List<VideoFile>) serverList.getObject();
			videoListMax = videoList.size();
		}
		else {
			System.out.println("Wrong object type recieved for videoList.");
		}

	}

	/* Opens a socket for communication with the server. Used in initial setup */
	private void openSocket() throws UnknownHostException, IOException {
		serverSocket = new Socket(host, port);
		System.out.println("Client: Listening");
		inputFromServer = new ObjectInputStream(serverSocket.getInputStream());
		outputToServer = new ObjectOutputStream(serverSocket.getOutputStream());
	}

	/*
	 * Sets up the VLC libraries based on the path defined within the method for
	 * encapsulation purposes.
	 */
	private void setupLibraries() {
		String vlcLibraryPath = "VLC/vlc-2.0.1";
		NativeLibrary.addSearchPath(RuntimeUtil.getLibVlcLibraryName(), vlcLibraryPath);
		Native.loadLibrary(RuntimeUtil.getLibVlcLibraryName(), LibVlc.class);
	}

	/*
	 * Method to safely toggle between fullscreen and non-fullscreen BUG: if you
	 * click on the black space before the video plays, the key listener doesn't
	 * work
	 */
	public void toggleFullScreen() {
		if (fullscreen) {
			// show menu bar
			menuBar.setVisible(true);

			// show control bar
			videoControlsVisibility.setSelected(false);
			videoControlsVisibility.doClick();
			videoControlsVisibility.setSelected(true);

			// show video list
			infoPaneVisibility.setSelected(false);
			infoPaneVisibility.doClick();
			infoPaneVisibility.setSelected(true);

			// now is not fullscreen
			fullscreen = false;

		}
		else {
			/* if non fullscreen, then make fullscreen */
			// fullscreen the window
			this.setExtendedState(this.getExtendedState() | JFrame.MAXIMIZED_BOTH);

			/*
			 * hide borders? this.setVisible(false);
			 * this.setDefaultLookAndFeelDecorated(false);
			 * this.setVisible(true);
			 */

			// hide menu bar
			menuBar.setVisible(false);

			// hide control bar
			videoControlsVisibility.setSelected(true);
			videoControlsVisibility.doClick();
			videoControlsVisibility.setSelected(false);

			// hide video list
			infoPaneVisibility.setSelected(true);
			infoPaneVisibility.doClick();
			infoPaneVisibility.setSelected(false);

			// now is fullscreen
			fullscreen = true;
		}
	}

	/* Sets up the media player and adds it to the appropriate panning */
	private void setupPlayer() {
		/* Media player component */
		mediaPlayerComponent = new EmbeddedMediaPlayerComponent();
		videoPanel.add(mediaPlayerComponent);
		mediaPlayer = mediaPlayerComponent.getMediaPlayer();
		controlsPanel = new CustomControls(mediaPlayer, this);
		videoPanel.add(controlsPanel, BorderLayout.SOUTH);
		media = "rtp://@127.0.0.1:5555";
		mediaPlayerComponent.setFocusable(false);
		videoPanel.setFocusable(false);
		controlsPanel.setFocusable(false);

	}

	/* Close socket and Tidy Up */
	public void shutdownClient() {
		// if (mediaPlayer != null) {
		// mediaPlayer.stop();
		// }
		try {
			sendCommand("SHUTDOWN");
		} catch (IOException e1) {
		}
		try {
			serverSocket.close();
		} catch (IOException e) {
			e.printStackTrace();
		}
		dispose();

		if (listen.isAlive()) {
			System.out.println("client listen alive");
		}
	}

	/*
	 * The following methods are all getters for client variables
	 */
	// Getter for the size of the video list
	public int getVideoListMax() {
		return videoListMax;
	}

	// Getter for the ID of the video playing
	public int currentIndex() {
		return currentIndex;
	}

	// Getter for the slider position
	public float getPositionValue() {
		return controlsPosition;
	}

	// Getter for the current time
	public long getTimeValue() {
		return currentTime;
	}

	// Getter for the length of the video
	public long getLength() {
		return videoLength;
	}

}